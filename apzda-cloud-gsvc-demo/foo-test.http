### FooService err
POST http://{{fooService}}/foo/hai
Content-Type: application/json
X-Request-ID: 1234-4567-89AB

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        client.assert(response.headers.valueOf("X-Request-ID") === "1234-4567-89AB", "Request ID is incorrect!")
    });
%}

### FooService Login - need mfa setup
POST http://{{fooService}}/foobar/login
Content-Type: application/x-www-form-urlencoded; charset=utf-8
Accept: application/json

username = user1 &
password = 123456

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.mfa==='UNSET', "MFA状态 "+response.body.data.mfa +" != UNSET");
        client.global.set("accessToken", response.body.data.accessToken)
    });
%}

### FooService Hi - need mfa setup
POST http://{{fooService}}/foo/hai
Content-Type: application/json
X-Gsvc-Caller: gtw
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -801, "出错啦: " + response.body.errCode + " != -801");
    });
%}

### FooService Login
POST http://{{fooService}}/foobar/login
Content-Type: application/x-www-form-urlencoded; charset=utf-8
Accept: application/json

username = admin &
password = 123456

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.uid === "admin", "出错啦: admin!=" + response.body.data.uid);
        client.global.set("accessToken", response.body.data.accessToken)
    });
%}

### FooService Greeting
POST http://{{fooService}}/~fooService/greeting
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "gsvc.foo.bar@greeting", "响应不等于'gsvc.foo.bar@greeting'")
    });
%}

### FooService Greeting - Age is invalid
POST http://{{fooService}}/~fooService/greeting
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 17
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -997, "错误的响应码" + response.body.errCode);
        client.assert(response.body.data.age != undefined, "未包括age错误提示")
    });
%}

### FooService Hello
POST http://{{fooService}}/~fooService/hello
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var cnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("gsvc.foo2.bar@hello") > 0) {
            cnt++;
        }
    }, () => {
        client.test("Get One Data", function () {
            client.assert(cnt === 1, cnt + " != 1");
        });
    });
%}

### FooService Hi
POST http://{{fooService}}/~fooService/hi
Content-Type: application/json
X-Gsvc-Caller: gtw
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var cnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("gsvc.foo3.bar@hi") > 0) {
            cnt++;
        }
    }, () => {
        client.test("Get Two Datas", function () {
            client.assert(cnt === 2, cnt + " != 2")
        });
    });
%}

### FooService Hi - POST - URLENCODE
POST http://{{fooService}}/~fooService/hi?a=1
Content-Type: application/x-www-form-urlencoded
X-Gsvc-Caller: gtw
Authorization: Bearer {{accessToken}}

name = gsvc &
age = 18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var cnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("gsvc.foo3.bar@hi") > 0) {
            cnt++;
        }
    }, () => {
        client.test("Get Two Datas", function () {
            client.assert(cnt === 2, cnt + " != 2")
        });
    });
%}

### FooService SaInfo - POST - URLENCODE
POST http://{{fooService}}/~fooService/saInfo
Content-Type: application/x-www-form-urlencoded
X-Gsvc-Caller: gtw
Authorization: Bearer {{accessToken}}

name = gsvc &
age = 18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "gsvc.admin", response.body.name + " !=  gsvc.admin")
    });
%}

### Route - FooService Greeting
POST http://{{fooService}}/foo/greeting
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "gsvc.foo.bar@greeting", "响应不等于'gsvc.foo.bar@greeting'")
    });
%}

### Route - FooService Hello
POST http://{{fooService}}/foo/hello
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var cnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("gsvc.foo2.bar@hello") > 0) {
            cnt++;
        }
    }, () => {
        client.test("Get One Data", function () {
            client.assert(cnt === 1, cnt + " != 1")
        });
    })
%}

### Route - FooService hey - GET
GET http://{{fooService}}/foo/hey?name=gsvc&age=18
X-Gsvc-Caller: gtw

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 400");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var cnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("gsvc.foo3.bar@hi") > 0) {
            cnt++;
        }
    }, () => {
        client.test("Get Two Datas", function () {
            client.assert(cnt === 2, cnt + " != 2");
        })
    })
%}

### FooService Login - User
POST http://{{fooService}}/foobar/login
Content-Type: application/x-www-form-urlencoded; charset=utf-8
Accept: application/json

username = user &
password = 123456

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken", response.body.data.accessToken)
    });
%}

### FooService SaInfo - User - View Gsvc
POST http://{{fooService}}/~fooService/saInfo
Content-Type: application/x-www-form-urlencoded
X-Gsvc-Caller: gtw
Authorization: Bearer {{accessToken}}

name = gsvc &
age = 18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 403");
    });
%}

### FooService SaInfo - User - View user
POST http://{{fooService}}/~fooService/saInfo
Content-Type: application/x-www-form-urlencoded
X-Gsvc-Caller: gtw
Authorization: Bearer {{accessToken}}

name = user &
age = 18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "user.user", response.body.name + " !=  user.user")
    });
%}
