### FooService Greeting
POST http://{{fooService}}/~fooService/greeting
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  const type = response.contentType.mimeType;
  client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
  client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
  client.assert(response.body.name === "gsvc.foo.bar@greeting","响应不等于'gsvc.foo.bar@greeting'")
});
%}

### FooService Hello
POST http://{{fooService}}/~fooService/hello
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  const type = response.contentType.mimeType;
  client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
  client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
  client.assert(response.body.name === "gsvc.foo2.bar@hello","响应不等于'gsvc.foo2.bar@hello'")
});
%}

### FooService Hi
POST http://{{fooService}}/~fooService/hi
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 400");
  const type = response.contentType.mimeType;
  client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
  client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
  client.assert(response.body.name === "gsvc.foo3.bar@hi","响应不等于'gsvc.foo3.bar@hi'")
});
%}

### FooService Hi - POST - URLENCODE
POST http://{{fooService}}/~fooService/hi
Content-Type: application/x-www-form-urlencoded
X-Gsvc-Caller: gtw

name=gsvc&age=18

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 400");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
        client.assert(response.body.name === "gsvc.foo3.bar@hi","name != 'gsvc.foo3.bar@hi'")
        client.assert(response.body.age === 24,"age != 24")
    });
%}

### FooService SaInfo - POST - URLENCODE
POST http://{{fooService}}/~fooService/saInfo
Content-Type: application/x-www-form-urlencoded
X-Gsvc-Caller: gtw

name=gsvc&age=18

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 400");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
        client.assert(response.body.name === "gsvc.sa","name != 'gsvc.sa'")
    });
%}

### Route - FooService Greeting
POST http://{{fooService}}/foo/greeting
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  const type = response.contentType.mimeType;
  client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
  client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
  client.assert(response.body.name === "gsvc.foo.bar@greeting","响应不等于'gsvc.foo.bar@greeting'")
});
%}

### Route - FooService Hello
POST http://{{fooService}}/foo/hello
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  const type = response.contentType.mimeType;
  client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
  client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
  client.assert(response.body.name === "gsvc.foo2.bar@hello","响应不等于'gsvc.foo2.bar@hello'")
});
%}

### Route - FooService hey - GET
GET http://{{fooService}}/foo/hey?name=gsvc&age=18
X-Gsvc-Caller: gtw

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 400");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: "+ response.body.errMsg);
        client.assert(response.body.name === "gsvc.foo3.bar@hi","name != 'gsvc.foo3.bar@hi'")
        client.assert(response.body.age === 24,"age != 24")
    });
%}
