### Route - I18N(zh_CN) - /token/i18n/bar.hello
GET http://{{barService}}/token/i18n/bar.hello
Cookie: lang=zh_CN

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body === "你好Bar!", "出错啦: " + response.body + " != '你好Bar!'");
    });
%}

### Route - gI18N(zh_CN) - /token/gi18n/math.hello
GET http://{{barService}}/token/gi18n/math.hello
Cookie: lang=zh_CN

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body === "你好Math!", "出错啦: " + response.body + " != '你好Math!'");
    });
%}

### Route - I18N(default) - /token/i18n/bar.hello
GET http://{{barService}}/token/i18n/bar.hello
Cookie: lang=en

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body === "Hello Bar!", "出错啦: " + response.body + " != 'Hello Bar！'");
    });
%}

### BarService Greeting
//@no-redirect
POST http://{{barService}}/~barService/greeting
Content-Type: application/json
X-Gsvc-Caller: g-t-w

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "gsvc.bar@greeting", "响应不等于'gsvc.bar@greeting'")
    });
%}

### BooService Hello
POST http://{{barService}}/~barService/hello
Content-Type: application/json
X-Gsvc-Caller: g-t-w

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'application/json' but received '" + type + "'");
    });
    var cnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("gsvc.bar@hello") > 0) {
            cnt = cnt + 1;
        }
    }, () => {
        client.test("Got one data", function () {
            client.assert(cnt === 1, cnt + " != 1");
        });
    });

%}

### BooService Hi
POST http://{{barService}}/~barService/hi
Content-Type: application/json
X-Gsvc-Caller: g-t-w

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var threeCnt = 0;
    var sevenCnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("\"fileCount\":3") > 0) {
            threeCnt = threeCnt + 1;
        } else if (line && line.indexOf("\"fileCount\":7") > 0) {
            sevenCnt = sevenCnt + 1;
        }
    }, () => {
        client.test("fileCount is 3", function () {
            client.assert(threeCnt === 1, threeCnt + " != 1");
        });
        client.test("fileCount is 7", function () {
            client.assert(sevenCnt === 1, sevenCnt + " != 1");
        });
    })
%}

### Route - BooService bar/hello
POST http://{{barService}}/bar/hello
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'application/json' but received '" + type + "'");
    });
    var cnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("gsvc.bar@hello") > 0) {
            cnt = cnt + 1;
        }
    }, () => {
        client.test("Got one data", function () {
            client.assert(cnt === 1, cnt + " != 1");
        });
    });
%}


### Route - BooService Greeting
POST http://{{barService}}/greeting
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "gsvc.bar@greeting", "响应不等于'gsvc.bar@greeting'")
    });
%}

### Route - BooService Greeting Hello
POST http://{{barService}}/greeting/hello
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    response.body.onEachLine((line, unsubscribe) => {
        if (line) {
            client.test("Age is 20", function () {
                client.assert(line.indexOf('"age":20') > 0, "errCode is not 0");
            })
        }
    }, () => {
        client.test("Request executed successfully", function () {
            client.assert(response.status === 200, "Response status is not 200");
            const type = response.contentType.mimeType;
            client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
        });
    });
%}

### Route - BooService Greet
POST http://{{barService}}/greet
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "gsvc.bar@greeting", "响应不等于'gsvc.bar@greeting'")
    });
%}

### Route - SaService - /sa/login
POST http://{{barService}}/sa/login
Content-Type: application/json

{
    "username": "admin",
    "password": "123456"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken", response.body.data.accessToken)
        client.global.set("refreshToken", response.body.data.refreshToken)
    });
%}

### Route - BooService bar/hi
POST http://{{barService}}/bar/hi
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var threeCnt = 0;
    var sevenCnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("\"fileCount\":3") > 0) {
            threeCnt = threeCnt + 1;
        } else if (line && line.indexOf("\"fileCount\":7") > 0) {
            sevenCnt = sevenCnt + 1;
        }
    }, () => {
        client.test("fileCount is 3", function () {
            client.assert(threeCnt === 1, threeCnt + " != 1");
        });
        client.test("fileCount is 7", function () {
            client.assert(sevenCnt === 1, sevenCnt + " != 1");
        });
    })
%}

### Route - SaService - /sa/info
POST http://{{barService}}/sa/info
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.userName === "gsvc.admin", "userName != gsvc.admin");
        client.assert(response.body.data.uid === "admin", "uid != admin");
    });
%}

### Route - SaService - /sa/hi.after-login
POST http://{{barService}}/sa/hi
// @no-redirect
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.userName === "gsvc, admin", response.body.userName + "!= gsvc, admin")
    });
%}

### BarService authz - authed
GET http://{{barService}}/token/authz
// @no-redirect
Accept: application/json
Authorization: Bearer {{accessToken}}
Accept-Language: zh-CN
X-OS-Name: MacOS

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.message === '你好Math! - MacOS', "response message is not '你好Math! - MacOS'")
    });
%}

### BarService authx - forbidden
GET http://{{barService}}/token/authx
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -403, "出错啦: " + response.body.errMsg);
    });
%}

### Auth - API - /token/refresh
POST http://{{barService}}/token/refresh
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "admin",
  "refreshToken": "{{refreshToken}}",
  "accessToken": "{{accessToken}}"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.global.set("accessToken", response.body.data.accessToken)
        client.global.set("refreshToken", response.body.data.refreshToken)
    });
%}

### Route - SaService - /sa/hi.after-refresh
POST http://{{barService}}/sa/hi
// @no-redirect
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not " + response.status);
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.userName === "gsvc, admin", response.body.userName + "!= gsvc, admin")
    });
%}

### Auth - html - /logout#1
// @no-redirect
POST http://{{barService}}/logout
Accept: text/html
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 302, "Response status is not 302");
        const type = response.contentType.mimeType;
        client.assert(type === "text/html", "Expected 'text/html' but received '" + type + "'");
        client.assert(response.headers.valueOf("Location").endsWith("/home"), "'" + response.headers.valueOf('Location') + " not end with /home")
    });
%}

### Auth - API - /token/refresh#after-logout
//@no-redirect
POST http://{{barService}}/token/refresh
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "admin",
  "refreshToken": "{{refreshToken}}",
  "accessToken": "{{accessToken}}"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'text/plain' but received '" + type + "'");
        // client.assert(request.body.errCode === 500,"status != 500")
    });
%}

### Auth - API - /logout#2
POST http://{{barService}}/logout
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'text/plain' but received '" + type + "'");
        client.global.clear("accessToken")
        client.global.clear("refreshToken")
    });
%}

### BarService err
//@no-redirect
POST http://{{barService}}/~barService/err
Content-Type: application/json
X-Gsvc-Caller: g-t-w
Accept: application/json

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is '" + response.status + "' not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
        // client.assert(response.body.errMsg === 'UNAUTHORIZED', 'Response is not "UNAUTHORIZED"')
    });
%}

### BarService err
//@no-redirect
POST http://{{barService}}/~barService/err
Content-Type: application/json
X-Gsvc-Caller: g-t-w
Accept: application/json
Accept-Language: zh-CN

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is '" + response.status + "' not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
        //client.assert(response.body.errMsg === '未授权', 'Response is not "未授权"')
    });
%}

### BarService rpcErr
//@no-redirect
POST http://{{barService}}/~barService/rpcErr
Content-Type: application/json
X-Gsvc-Caller: g-t-w
Accept: application/json

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 500, "Response status is not 500");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -500, "出错啦: " + response.body.errMsg);
    });
%}

### BarService authz - unauthed
//@no-redirect
GET http://{{barService}}/token/authz
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}

### BarService local:fileupload
POST http://{{barService}}/file/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary
Accept: application/json

--boundary
Content-Disposition: form-data; name="files"; filename="pom.xml"
Content-Type: application/xml

< ./pom.xml
--boundary
Content-Disposition: form-data; name="files"; filename="1.txt"
Content-Type: text/plain

< ./files/1.txt
--boundary
Content-Disposition: form-data; name="path"

test/..././../aha/
--boundary

> {%
    client.test("Files uploaded successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errCode + " != 0");
        client.assert(response.body.data.files.length === 2, "出错啦: 文件数不为2");
        client.assert(response.body.data.files[0].error === 0, "出错啦: 文件1上传失败: " + response.body.data.files[0].message);
    });
%}

### Route - SaService - /sa/login/user2
POST http://{{barService}}/sa/login
Content-Type: application/json

{
    "username": "user2",
    "password": "123456"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken", response.body.data.accessToken)
        client.global.set("refreshToken", response.body.data.refreshToken)
    });
%}

### BarService Greeting - user2
//@no-redirect
POST http://{{barService}}/~barService/greeting
Content-Type: application/json
Accept: application/json
X-Gsvc-Caller: g-t-w
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -815, "出错啦: " + response.body.errMsg);
    });
%}

### SarService active - user2
//@no-redirect
POST http://{{barService}}/~saService/active
Content-Type: application/json
Accept: application/json
X-Gsvc-Caller: g-t-w
Authorization: Bearer {{accessToken}}

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
    });
%}

### Route - SaService - /sa/login/user3
POST http://{{barService}}/sa/login
Content-Type: application/json

{
    "username": "user3",
    "password": "123456"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken", response.body.data.accessToken)
        client.global.set("refreshToken", response.body.data.refreshToken)
    });
%}

### BarService Greeting - user3
//@no-redirect
POST http://{{barService}}/~barService/greeting
Content-Type: application/json
Accept: application/json
X-Gsvc-Caller: g-t-w
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -813, "出错啦: " + response.body.errMsg);
    });
%}

### SarService reset - user3
//@no-redirect
POST http://{{barService}}/~saService/reset
Content-Type: application/json
Accept: application/json
X-Gsvc-Caller: g-t-w
Authorization: Bearer {{accessToken}}

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
    });
%}


### Route - SaService - /sa/login/user4
POST http://{{barService}}/sa/login
Content-Type: application/json

{
    "username": "user4",
    "password": "123456"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken", response.body.data.accessToken)
        client.global.set("refreshToken", response.body.data.refreshToken)
    });
%}

### BarService Greeting - user4
//@no-redirect
POST http://{{barService}}/~barService/greeting
Content-Type: application/json
Accept: application/json
X-Gsvc-Caller: g-t-w
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -801, "出错啦: " + response.body.errMsg);
    });
%}

### SarService mfaSetup - user4
//@no-redirect
POST http://{{barService}}/~saService/setup
Content-Type: application/json
Accept: application/json
X-Gsvc-Caller: g-t-w
Authorization: Bearer {{accessToken}}

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken", null)
        client.global.set("refreshToken", null)
    });
%}

### BarService Unauthorized - /bar/acl/hello
// @no-redirect
GET http://{{barService}}/bar/acl/hello?name=Gsvc
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Unauthorized - /bar/acl/hi
// @no-redirect
GET http://{{barService}}/bar/acl/hi?name=Gsvc
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Unauthorized - /bar/method/gretting
// @no-redirect
GET http://{{barService}}/bar/method/greeting?name=Gsvc
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Unauthorized - /bar/method/hi
// @no-redirect
GET http://{{barService}}/bar/method/hi?name=Gsvc
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Unauthorized - /bar/rpc/hi
// @no-redirect
GET http://{{barService}}/bar/rpc/hi?name=Gsvc
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}


### BarService Authorized - /sa/login/admin
POST http://{{barService}}/sa/login
Content-Type: application/json

{
    "username": "admin",
    "password": "123456"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken", response.body.data.accessToken)
        client.global.set("refreshToken", response.body.data.refreshToken)
    });
%}

### BarService Authorized - /bar/acl/hello
// @no-redirect
GET http://{{barService}}/bar/acl/hello?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    });
%}

### BarService Authorized - /bar/acl/hi
// @no-redirect
GET http://{{barService}}/bar/acl/hi?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 403");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -403, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Authorized - /bar/method/gretting
// @no-redirect
GET http://{{barService}}/bar/method/greeting?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    });
%}

### BarService Authorized - /bar/method/hi
// @no-redirect
GET http://{{barService}}/bar/method/hi?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 403");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -403, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Authorized - /bar/rpc/hi
// @no-redirect
GET http://{{barService}}/bar/rpc/hi?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    });
%}

### BarService Authorized - /bar/rpc/deny
// @no-redirect
GET http://{{barService}}/bar/rpc/deny?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 403, "Response status is not 403");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -403, "出错啦: " + response.body.errMsg);
    });
    client.global.set("accessToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyNCIsImV4cCI6MTcxNTEyMzYxMn0.j9WhnMFXxx42vNyZzdhxld6aYSyMlP_KLAt10Ysm4Pw")
%}

### BarService Expired - /bar/acl/hello
// @no-redirect
GET http://{{barService}}/bar/acl/hello?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 403");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Expired - /bar/acl/hi
// @no-redirect
GET http://{{barService}}/bar/acl/hi?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 403");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
    });
%}

### BarService Expired - /bar/method/gretting
// @no-redirect
GET http://{{barService}}/bar/method/greeting?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.assert(response.status === 401, "Response status is not 403");
    const type = response.contentType.mimeType;
    client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
%}

### BarService Expired - /bar/method/hi
// @no-redirect
GET http://{{barService}}/bar/method/hi?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.assert(response.status === 401, "Response status is not 403");
    const type = response.contentType.mimeType;
    client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
%}

### BarService Expired - /bar/rpc/hi
// @no-redirect
GET http://{{barService}}/bar/rpc/hi?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.assert(response.status === 401, "Response status is not 403");
    const type = response.contentType.mimeType;
    client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
%}

### BarService Expired - /bar/rpc/deny
// @no-redirect
GET http://{{barService}}/bar/rpc/deny?name=Gsvc
Accept: application/json
Authorization: Bearer {{accessToken}}

> {%
    client.assert(response.status === 401, "Response status is not 403");
    const type = response.contentType.mimeType;
    client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    client.assert(response.body.errCode === -401, "出错啦: " + response.body.errMsg);
%}
