### BarService Greeting
POST http://{{barService}}/~barService/greeting
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@greeting", "响应不等于'gsvc.bar@greeting'")
    });
%}

### BooService Hello
POST http://{{barService}}/~barService/hello
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@hello", "响应不等于'gsvc.bar@hello'")
    });
%}

### BooService Hi
POST http://{{barService}}/~barService/hi
Content-Type: application/json
X-Gsvc-Caller: gtw

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 400");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@hi", "响应不等于'gsvc.bar@hi'")
    });
%}

### Route - BooService bar/hi
POST http://{{barService}}/bar/hi
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@hi", "响应不等于'gsvc.bar@hi'")
    });
%}


### Route - BooService bar/hello
POST http://{{barService}}/bar/hello
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@hello", "响应不等于'gsvc.bar@hello'")
    });
%}


### Route - BooService Greeting
POST http://{{barService}}/greeting
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@greeting", "响应不等于'gsvc.bar@greeting'")
    });
%}

### Route - BooService Greeting Hello
POST http://{{barService}}/greeting/hello
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@hello", "响应不等于'gsvc.bar@hello'")
    });
%}

### Route - BooService Greet
POST http://{{barService}}/greet
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "gsvc.bar@greeting", "响应不等于'gsvc.bar@greeting'")
    });
%}

### Route - SaService - /sa/login
POST http://{{barService}}/sa/login
Content-Type: application/json

{
    "username": "admin",
    "password": "123456"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.global.set("accessToken",response.body.accessToken)
    });
%}

### Route - SaService - /sa/info
POST http://{{barService}}/sa/info
Content-Type: application/json

{
    "username": "gsvc",
    "password": "123456"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
    });
%}

### Route - SaService - /sa/hi
POST http://{{barService}}/sa/hi
Content-Type: application/json
Accept: text/html
Authorization: Bearer {{accessToken}}

{
    "name": "gsvc"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.userName === "gsvc, admin",response.body.userName + "!= gsvc, admin")
    });
%}

### Auth - html - /logout
// @no-redirect
POST http://{{barService}}/logout
Accept: text/html


> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 302, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/html", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.headers.valueOf("Location").endsWith("/home") ,"'"+response.headers.valueOf('Location')+" not end with /home")
    });
%}

### Auth - API - /logout
POST http://{{barService}}/logout
Content-Type: application/json
Accept: application/json


> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'text/plain' but received '" + type + "'");
    });
%}
