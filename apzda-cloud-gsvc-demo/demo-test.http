### DemoService /demo/bar/hi
GET http://{{demoService}}/demo/bar/hi?name=demo&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "demo.bar@hi", "响应不等于'demo.bar@hi'")
    });
%}

### DemoService /demo/foo/hi
GET http://{{demoService}}/demo/foo/hi?name=demo&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "demo.foo3.bar@hi", "响应不等于'demo.foo3.bar@hi'")
    });
%}

### DemoService /demo/greeting
GET http://{{demoService}}/demo/greeting?name=demo

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "Hello demo", "响应不等于'Hello demo'")
    });
%}

### DemoService /demo/add
GET http://{{demoService}}/demo/add/1/2

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data === 3, "响应不等于3")
    });
%}

### DemoService /demo/sum
GET http://{{demoService}}/demo/sum

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data === 55, "响应不等于55")
    });
%}

### DemoService /demo/even
GET http://{{demoService}}/demo/square

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data === "1,4,9", "响应不等于1,4,9")
    });
%}

### DemoService /demo/upload
GET http://{{demoService}}/demo/upload

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.count === 3, "响应不等于3")
        client.assert(response.body.data.names[0] === 'a', "names[0] != a")
        client.assert(response.body.data.names[1] === 'b', "names[1] != b")
        client.assert(response.body.data.files[0].path === 'index.md', "!=index.md")
        client.assert(response.body.data.files[1].path === 'index.xml', "!=index.xml")
        client.assert(response.body.data.files[2].path === 'index.txt', "!=index.txt")
    });
%}

### DemoService /d/hi
GET http://{{demoService}}/demo/d/hi?name=gsvc&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.name === 'Hello gsvc', "出错啦: " + response.body.errMsg);
    });
%}

### DemoService /d/hi/greeting
GET http://{{demoService}}/demo/d/hi/greeting?name=greeting&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.name === 'Hello greeting', "出错啦: " + response.body.errMsg);
    });
%}

### DemoService /d/hi/greeting
GET http://{{demoService}}/demo/d/hello?name=hello&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.name === 'Hello hello', "出错啦: " + response.body.errMsg);
    });
%}


### DemoService /m/add
GET http://{{demoService}}/demo/m/add?num1=1&num2=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.result == 19, "出错啦: " + response.body.errMsg);
    });
%}

### DemoService Err
//@no-redirect
POST http://{{demoService}}/demo/~demoService/err
Content-Type: application/json
X-Gsvc-Caller: gtw

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 401, "错误的响应码" + response.body.errCode);
    });
%}
