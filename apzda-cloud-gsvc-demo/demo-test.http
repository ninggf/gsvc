### DemoService /demo/bar/hi
GET http://{{demoService}}/demo/bar/hi?name=demo&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "demo.bar@hi", "响应不等于'demo.bar@hi'")
    });
%}

### DemoService /demo/foo/hi
GET http://{{demoService}}/demo/foo/hi?name=demo&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "demo.foo3.bar@hi", "响应不等于'demo.foo3.bar@hi'")
    });
%}

### DemoService /demo/greeting
GET http://{{demoService}}/demo/greeting?name=demo

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "Hello demo", "响应不等于'Hello demo'")
    });
%}

### DemoService /demo/add
GET http://{{demoService}}/demo/add/1/2

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data === 3, "响应不等于3")
    });
%}

### DemoService /demo/sum
GET http://{{demoService}}/demo/sum

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data === 55, "响应不等于55")
    });
%}

### DemoService /demo/even
GET http://{{demoService}}/demo/square

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data === "1,4,9", "响应不等于1,4,9")
    });
%}

### DemoService /demo/upload
GET http://{{demoService}}/demo/upload

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.count === 3, "响应不等于3")
        client.assert(response.body.data.names[0] === 'a', "names[0] != a")
        client.assert(response.body.data.names[1] === 'b', "names[1] != b")
        client.assert(response.body.data.files[0].path === 'index.md', "!=index.md")
        client.assert(response.body.data.files[1].path === 'index.xml', "!=index.xml")
        client.assert(response.body.data.files[2].path === 'index.txt', "!=index.txt")
    });
%}

### DemoService /d/hi
GET http://{{demoService}}/demo/d/hi?name=gsvc&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.name === 'Hello gsvc', "出错啦: " + response.body.errMsg);
    });
%}

### DemoService /d/hi/greeting
GET http://{{demoService}}/demo/d/hi/greeting?name=greeting&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.name === 'Hello greeting', "出错啦: " + response.body.errMsg);
    });
%}

### DemoService /d/hi/greeting
GET http://{{demoService}}/demo/d/hello?name=hello&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.name === 'Hello hello', "出错啦: " + response.body.errMsg);
    });
%}


### DemoService /m/add
GET http://{{demoService}}/demo/m/add?num1=1&num2=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.data.result == 19, "出错啦: " + response.body.errMsg);
    });
%}

### DemoService Err
POST http://{{demoService}}/demo/~demoService/err
Content-Type: application/json
X-Gsvc-Caller: gtw
Accept: application/json

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 401, "错误的响应码" + response.body.errCode);
    });
%}

### DemoService Err
//@no-redirect
POST http://{{demoService}}/demo/~demoService/err
Content-Type: application/json
X-Gsvc-Caller: gtw
Accept: text/html

{
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 307, "Response status is " + response.status + " not 307");
        const type = response.contentType.mimeType;
        client.assert(type === "text/html", "Expected 'text/html' but received '" + type + "'");
        client.assert(response.headers.valueOf("Location").endsWith("/login"), "错误的登录地址: " + response.headers.valueOf("Location"));
    });
%}

### DemoService fw:/sa/hi
//@no-redirect
POST http://{{demoService}}/demo/sa/hi
Accept: text/html
Content-Type: application/json

{
    "age": 20,
    "name": "gsvc"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 307, "Response status is not 307");
        const type = response.contentType.mimeType;
        client.assert(type === "text/html", "Expected 'text/html' but received '" + type + "'");
        client.assert(response.headers.valueOf("Location").endsWith("/login"), "错误的登录地址: " + response.headers.valueOf("Location"));
    });
%}

### DemoService - Gateway - /token/i18n/bar.hello
GET http://{{demoService}}/demo/bar-service/bar.hello?name=张三丰
Content-Type: application/json
Accept: text/plain
Accept-Language: zh-CN

{
    "a": 1,
    "b": 2
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(response.body === '你好Bar! 张三丰', response.body + " != 你好Bar! 张三丰");
    });
%}

### DemoService - Gateway - /b/bar/x
GET http://{{demoService}}/demo/bar-service/bar.hello
Accept: text/plain
Accept-Language: en

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(response.body === 'Hello Bar!', response.body + " != Hello Bar!");
    });
%}

### DemoService fw:/demo/bar-service/bar/hi
POST http://{{demoService}}/demo/bar-service/bar/hi?name=demo&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "text/event-stream", "Expected 'text/event-stream' but received '" + type + "'");
    });
    var threeCnt = 0;
    var sevenCnt = 0;
    response.body.onEachLine((line, unsubscribe) => {
        if (line && line.indexOf("\"fileCount\":3") > 0) {
            threeCnt = threeCnt + 1;
        } else if (line && line.indexOf("\"fileCount\":7") > 0) {
            sevenCnt = sevenCnt + 1;
        }
    }, () => {
        client.test("fileCount is 3", function () {
            client.assert(threeCnt === 1, threeCnt + " != 1");
        });
        client.test("fileCount is 7", function () {
            client.assert(sevenCnt === 1, sevenCnt + " != 1");
        });
    })
%}

### DemoService fw:/demo/bar-service/bar/greeting
POST http://{{demoService}}/demo/bar-service/bar/greeting
Content-Type: application/json

{
    "name": "gsvc",
    "age": 18
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.data.name === "gsvc.bar@greeting", "响应不等于'gsvc.bar@greeting'")
    });
%}

### DemoService fw:/demo/file/upload
POST http://{{demoService}}/demo/file/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundar
Accept: application/json

--boundary
Content-Disposition: form-data; name="file"; filename="abc.txt"
Content-Type: text/plain

< ./files/1.txt
--boundary

> {%
    client.test("Files uploaded successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errCode + " != 0");
        client.assert(response.body.data.files[0] != undefined, "出错啦: 文件上传失败");
        client.assert(response.body.data.files[0].error === 0, "出错啦: 文件上传失败: " + response.body.data.files[0].message);
        client.assert(response.body.data.files[0].length == 7, "出错啦: 文件上传失败: " + response.body.data.files[0].length);
    });
%}

### DemoService fw:/demo/upload
POST http://{{demoService}}/demo/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundar
Accept: application/json

--boundary
Content-Disposition: form-data; name="file"; filename="abc.txt"
Content-Type: text/plain

< ./files/1.txt
--boundary

> {%
    client.test("Files uploaded successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errCode + " != 0");
        client.assert(response.body.message === 'abc.txt', "出错啦: 文件上传失败");
    });
%}

### DemoService fw:/demo/foo/timeout1
GET http://{{demoService}}/demo/foo/timeout1

> {%

    client.test("Gateway should be timeout ", function () {
        client.assert(response.status === 504, "Response status is not 504");
    });
%}

### DemoService fw:/demo/foo/timeout2
GET http://{{demoService}}/demo/foo/timeout2

> {%

    client.test("Gateway should be timeout ", function () {
        client.assert(response.status === 504, "Response status is not 504");
    });
%}

### DemoService fw:/demo/foo/timeout3
GET http://{{demoService}}/demo/foo/timeout3

> {%

    client.test("Gateway should be timeout ", function () {
        client.assert(response.status === 504, "Response status is not 504");
    });
%}

### DemoService fw:/demo/foo/sleep1
POST http://{{demoService}}/demo/foo/sleep1

> {%

    client.test("Gateway should be ok", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### DemoService fw:/demo/foo/sleep2
POST http://{{demoService}}/demo/foo/sleep2

> {%

    client.test("Gateway should be timeout ", function () {
        client.assert(response.status === 504, "Response status is not 504");
    });
%}

### DemoService fw:/demo/foo/sleep3
POST http://{{demoService}}/demo/foo/sleep3

> {%

    client.test("Gateway should be timeout ", function () {
        client.assert(response.status === 504, "Response status is not 504");
    });
%}

### DemoService /demo/~demoService/ipAddr
POST http://{{demoService}}/demo/~demoService/ipAddr
X-Real-IP: 8.8.8.8
X-Gsvc-Caller: gtw

> {%
    client.test("Remote Ip is 8.8.8.8", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.errMsg === "8.8.8.8", response.body.errMsg)
    });
%}

### DemoService fw:/demo/bar-service/bar/ipAddr
POST http://{{demoService}}/demo/bar-service/bar/ipAddr
X-Real-IP: 8.8.8.8
X-Gsvc-Caller: gtw

> {%
    client.test("Remote Ip is 8.8.8.8", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.errMsg === "8.8.8.8", response.body.errMsg)
    });
%}

### DemoService fw:/demo/bar-service/ipAddr
GET http://{{demoService}}/demo/bar-service/ipAddr
X-Real-IP: 6.6.6.6
X-Gsvc-Caller: gtw

> {%
    client.test("Remote Ip is 6.6.6.6", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.message === "6.6.6.6", response.body.errMsg)
    });
%}
