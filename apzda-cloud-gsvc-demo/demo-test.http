### DemoService /demo/bar/hi
GET http://{{demoService}}/demo/bar/hi?name=demo&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "demo.bar@hi", "响应不等于'demo.bar@hi'")
    });
%}

### DemoService /demo/foo/hi
GET http://{{demoService}}/demo/foo/hi?name=demo&age=18

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "demo.foo3.bar@hi", "响应不等于'demo.foo3.bar@hi'")
    });
%}

### DemoService /demo/greeting
GET http://{{demoService}}/demo/greeting?name=demo

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
        client.assert(response.body.errCode === 0, "出错啦: " + response.body.errMsg);
        client.assert(response.body.name === "Hello demo", "响应不等于'Hello demo'")
    });
%}
