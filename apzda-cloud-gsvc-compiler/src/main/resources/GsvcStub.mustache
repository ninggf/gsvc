{{#packageName}}
package {{packageName}};
{{/packageName}}

import com.apzda.cloud.gsvc.client.IServiceCaller;
import com.apzda.cloud.gsvc.config.GatewayServiceConfigure;
import com.apzda.cloud.gsvc.core.GatewayServiceRegistry;
import com.apzda.cloud.gsvc.grpc.FluxObserver;
import com.apzda.cloud.gsvc.grpc.StubFactoryAdapter;
import io.grpc.stub.StreamObserver;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import java.time.Duration;

{{#deprecated}}
@java.lang.Deprecated
{{/deprecated}}
@Configuration(proxyBeanMethods = false)
@PropertySource(value = "classpath:{{interfaceClassName}}.gateway.properties", ignoreResourceNotFound = true)
public class {{className}} {

    private static final java.util.Map<String, Object[]> METHOD_META_INFO = new java.util.HashMap<>();

    static {
    {{#unaryMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.UNARY,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/unaryMethods}}
    {{#serverStreamingMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/serverStreamingMethods}}
    {{#clientStreamingMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/clientStreamingMethods}}
    {{#biStreamingWithoutClientStreamMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/biStreamingWithoutClientStreamMethods}}
        GatewayServiceRegistry.register({{interfaceClassName}}.class, METHOD_META_INFO);
    }

    @Bean
    @ConditionalOnMissingBean({{interfaceClassName}}.class)
    @ConditionalOnProperty(value = "apzda.cloud.reference.{{interfaceClassName}}.grpc", havingValue = "false", matchIfMissing = true)
    {{interfaceClassName}} gsvc{{interfaceClassName}}Stub(IServiceCaller serviceCaller) {
        GatewayServiceRegistry.registerProxy({{interfaceClassName}}.class);
        return new {{interfaceClassName}}() {
        {{#unaryMethods}}
            @Override
            public {{outputType}} {{methodName}}({{inputType}} request) {
                return serviceCaller.unaryCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/unaryMethods}}
        {{#serverStreamingMethods}}
            @Override
            public reactor.core.publisher.Flux<{{outputType}}> {{methodName}}({{inputType}} request) {
                return serviceCaller.serverStreamingCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/serverStreamingMethods}}
        {{#clientStreamingMethods}}
            @Override
            public reactor.core.publisher.Flux<{{outputType}}> {{methodName}}(reactor.core.publisher.Flux<{{inputType}}> request) {
                return serviceCaller.clientStreamingCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/clientStreamingMethods}}
        {{#biStreamingWithoutClientStreamMethods}}
            @Override
            public reactor.core.publisher.Flux<{{outputType}}> {{methodName}}(reactor.core.publisher.Flux<{{inputType}}> request) {
                return serviceCaller.bidiStreamingCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/biStreamingWithoutClientStreamMethods}}
        };
    }

    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(value = "apzda.cloud.reference.{{interfaceClassName}}.grpc.enabled", havingValue = "true")
    {{interfaceClassName}} grpc{{interfaceClassName}}Adapter (final StubFactoryAdapter adapter, final GatewayServiceConfigure serviceConfigure) {
        final {{interfaceClassName}}Grpc.{{interfaceClassName}}BlockingStub blockingStub = adapter.createBlockingStub("{{interfaceClassName}}",
                {{interfaceClassName}}Grpc.{{interfaceClassName}}BlockingStub.class);
        final {{interfaceClassName}}Grpc.{{interfaceClassName}}Stub stub = adapter.createAsyncStub("{{interfaceClassName}}",
                {{interfaceClassName}}Grpc.{{interfaceClassName}}Stub.class);
        final Duration timeout = serviceConfigure.getReadTimeout("{{interfaceClassName}}", true);

        return new {{interfaceClassName}}() {
        {{#unaryMethods}}
            @Override
            public {{outputType}} {{methodName}}({{inputType}} request) {
                return blockingStub.{{methodName}}(request);
            }
        {{/unaryMethods}}
        {{#serverStreamingMethods}}
            @Override
            public reactor.core.publisher.Flux<{{outputType}}> {{methodName}}({{inputType}} request) {
                final FluxObserver<{{outputType}}> observer = new FluxObserver<>();
                stub.{{methodName}}(request, observer);
                return observer.getFlux().timeout(timeout);
            }
        {{/serverStreamingMethods}}
        {{#clientStreamingMethods}}
            @Override
            public reactor.core.publisher.Flux<{{outputType}}> {{methodName}}(reactor.core.publisher.Flux<{{inputType}}> request) {
                final FluxObserver<{{outputType}}> observer = new FluxObserver<>();
                final StreamObserver<{{inputType}}> reqObserver = stub.{{methodName}}(observer);

                request.doOnComplete(reqObserver::onCompleted)
                    .doOnError(reqObserver::onError)
                    .subscribe(reqObserver::onNext);

                return observer.getFlux().timeout(timeout);
            }
        {{/clientStreamingMethods}}
        {{#biStreamingWithoutClientStreamMethods}}
            @Override
            public reactor.core.publisher.Flux<{{outputType}}> {{methodName}}(reactor.core.publisher.Flux<{{inputType}}> request) {
                final FluxObserver<{{outputType}}> resultObserver = new FluxObserver<>();
                final StreamObserver<{{inputType}}> reqObserver = stub.{{methodName}}(resultObserver);

                request.doOnComplete(reqObserver::onCompleted)
                    .doOnError(reqObserver::onError)
                    .subscribe(reqObserver::onNext);

                return resultObserver.getFlux().timeout(timeout);
            }
        {{/biStreamingWithoutClientStreamMethods}}
        };
    }

    @com.apzda.cloud.gsvc.grpc.GrpcService
    @ConditionalOnMissingBean
    @ConditionalOnProperty(value = "apzda.cloud.service.{{interfaceClassName}}.grpc.enabled", havingValue = "true")
    {{interfaceClassName}}Grpc.{{interfaceClassName}}ImplBase grpc{{interfaceClassName}}ImplAdapter(final {{interfaceClassName}} serviceImpl) {
        return new {{interfaceClassName}}Grpc.{{interfaceClassName}}ImplBase() {
        {{#unaryMethods}}
            public void {{methodName}}({{inputType}} request, StreamObserver<{{outputType}}> responseObserver) {
                try {
                    responseObserver.onNext(serviceImpl.{{methodName}}(request));
                    responseObserver.onCompleted();
                }
                catch (Exception e) {
                    responseObserver.onError(e);
                }
            }
        {{/unaryMethods}}
        {{#serverStreamingMethods}}
            public void {{methodName}}({{inputType}} request, StreamObserver<{{outputType}}> responseObserver) {
                try {
                    serviceImpl.{{methodName}}(request)
                        .doOnError(responseObserver::onError)
                        .doOnComplete(responseObserver::onCompleted)
                        .subscribe(responseObserver::onNext);
                }
                catch (Exception e) {
                    responseObserver.onError(e);
                }
            }
        {{/serverStreamingMethods}}
        {{#clientStreamingMethods}}
            @Override
            public StreamObserver<{{inputType}}> {{methodName}}(StreamObserver<{{outputType}}> responseObserver) {
                final FluxObserver<{{inputType}}> req = new FluxObserver<>();
                final reactor.core.publisher.Flux<{{outputType}}> res = serviceImpl.{{methodName}}(req.getFlux());

                res.doOnComplete(responseObserver::onCompleted)
                    .doOnError(responseObserver::onError)
                    .subscribe(responseObserver::onNext);

                return req;
            }
        {{/clientStreamingMethods}}
        {{#biStreamingWithoutClientStreamMethods}}
            @Override
            public StreamObserver<{{inputType}}> {{methodName}}(StreamObserver<{{outputType}}> responseObserver) {
                final FluxObserver<{{inputType}}> req = new FluxObserver<>();
                final reactor.core.publisher.Flux<{{outputType}}> res = serviceImpl.{{methodName}}(req.getFlux());

                res.doOnComplete(responseObserver::onCompleted)
                    .doOnError(responseObserver::onError)
                    .subscribe(responseObserver::onNext);

                return req;
            }
        {{/biStreamingWithoutClientStreamMethods}}
        };
    }
}
