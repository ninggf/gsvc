{{#packageName}}
package {{packageName}};
{{/packageName}}

import com.apzda.cloud.gsvc.client.IServiceCaller;
import com.apzda.cloud.gsvc.core.GatewayServiceRegistry;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

{{#deprecated}}
@java.lang.Deprecated
{{/deprecated}}
@Configuration(proxyBeanMethods = false)
@PropertySource(value = "classpath:{{interfaceClassName}}.gateway.properties", ignoreResourceNotFound = true)
public class {{className}} {

    private static final java.util.Map<String, Object[]> METHOD_META_INFO = new java.util.HashMap<>();

    static {
    {{#unaryMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.UNARY,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/unaryMethods}}
    {{#serverStreamingMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/serverStreamingMethods}}
    {{#clientStreamingMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/clientStreamingMethods}}
    {{#biStreamingWithoutClientStreamMethods}}
        METHOD_META_INFO.put("{{methodName}}",new Object[]{
            io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING,
            {{inputType}}.class,
            {{outputType}}.class
        });
    {{/biStreamingWithoutClientStreamMethods}}
        GatewayServiceRegistry.register({{interfaceClassName}}.class, METHOD_META_INFO);
    }

    @Bean
    @ConditionalOnMissingBean({{interfaceClassName}}.class)
    {{interfaceClassName}} gsvc{{interfaceClassName}}Stub(IServiceCaller serviceCaller) {
        GatewayServiceRegistry.registerProxy({{interfaceClassName}}.class);
        return new {{interfaceClassName}}() {
        {{#unaryMethods}}
            @Override
            public {{outputType}} {{methodName}}({{inputType}} request) {
                return serviceCaller.unaryCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/unaryMethods}}
        {{#serverStreamingMethods}}
            @Override
            public Flux<{{outputType}}> {{methodName}}({{inputType}} request) {
                return serviceCaller.serverStreamingCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/serverStreamingMethods}}
        {{#clientStreamingMethods}}
            @Override
            public {{outputType}} {{methodName}}(Flux<{{inputType}}> request) {
                return serviceCaller.clientStreamingCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/clientStreamingMethods}}
        {{#biStreamingWithoutClientStreamMethods}}
            @Override
            public Flux<{{outputType}}> {{methodName}}(Flux<{{inputType}}> request) {
                return serviceCaller.bidiStreamingCall({{interfaceClassName}}.class, "{{methodName}}", request, {{inputType}}.class, {{outputType}}.class);
            }
        {{/biStreamingWithoutClientStreamMethods}}
        };
    }
}
