name: MicroService Architecture Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        java: [ '17','21' ]
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: maven
      - name: Install Gsvc Compiler
        run: mvn install -pl apzda-cloud-gsvc-compiler
      - name: Build with Maven
        run: mvn -B package -Djava.version=${{ matrix.java }} --file pom.xml
      - name: Run All Services
        uses: JarvusInnovations/background-action@v1
        with:
          working-directory: apzda-cloud-gsvc-demo
          wait-for: 5m
          tail: true
          run: |-
            java -jar demo-math-service/target/demo-math-service-fat.jar &
            java -jar demo-bar-service/target/demo-bar-service-fat.jar &
            java -jar demo-foo-service/target/demo-foo-service-fat.jar &
            java -jar demo-demo-service/target/demo-demo-service-fat.jar &
          wait-on: |-
            http-get://localhost:12561/actuator/health
            http-get://localhost:12562/actuator/health
            http-get://localhost:12563/demo/actuator/health
            tcp:localhost:9090
      - name: Download ijhttp tools
        run: |-
          # curl -f -L -o ijhttp.zip "https://jb.gg/ijhttp/latest"
          # unzip ijhttp.zip
          # ./ijhttp/ijhttp --version
          docker pull jetbrains/intellij-http-client:233.15026.9
          docker tag  jetbrains/intellij-http-client:233.15026.9 ijhttp
      - name: Execute HTTP requests
        run: |-
          #./ijhttp/ijhttp --env-file apzda-cloud-gsvc-demo/http-client.env.json --env dev apzda-cloud-gsvc-demo/demo-test.http
          #./ijhttp/ijhttp --env-file apzda-cloud-gsvc-demo/http-client.env.json --env dev apzda-cloud-gsvc-demo/bar-test.http
          #./ijhttp/ijhttp --env-file apzda-cloud-gsvc-demo/http-client.env.json --env dev apzda-cloud-gsvc-demo/foo-test.http
          docker run --rm -v ./apzda-cloud-gsvc-demo:/workdir --add-host host.docker.internal:host-gateway ijhttp -D \
            --env-file http-client.env.json --env dev \
            demo-test.http bar-test.http foo-test.http

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ "build" ]
    runs-on: ubuntu-22.04
    env:
      MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      GPG_SECURITY_PWD: ${{ secrets.GPG_SECRET_PWD }}
    steps:
      - name: Install gpg secret key
        run: |-
          # Install gpg secret key
          cat <(echo -e "${{ secrets.GPG_SECRET_KEY }}") | gpg --batch --import
          # Verify gpg secret key
          gpg --list-secret-keys --keyid-format LONG
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Change Version
        run: |-
          version=$(sed -n -r '/(.+)-SNAPSHOT/p' pom.xml | head -n 1 | sed -rn 's/<version>(.+)<\/version>/\1/p' | xargs echo)
          echo "Compiler Version: ${version}"
          sed -i "s/\${project.version}/${version}/" pom.xml
          echo "GSVC_VER=${version}" >> $GITHUB_ENV
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: maven
      - name: Set up maven settings
        uses: s4u/maven-settings-action@v3.0.0
        with:
          servers: |
            [{
              "id": "ossrh",
              "username": "${{ secrets.OSSRH_USERNAME }}",
              "password": "${{ secrets.OSSRH_TOKEN }}"
            }]
      - name: Deploy to OSSRH
        if: ${{ endsWith(env.GSVC_VER, '-SNAPSHOT') }}
        run: mvn -P+deploy -Djava.version=17 -DskipTests=true clean deploy
